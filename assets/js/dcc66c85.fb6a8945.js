"use strict";(self.webpackChunkwin_32_site=self.webpackChunkwin_32_site||[]).push([[320],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=l(n),d=a,g=m["".concat(p,".").concat(d)]||m[d]||u[d]||o;return n?r.createElement(g,i(i({ref:t},c),{},{components:n})):r.createElement(g,i({ref:t},c))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[m]="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},925:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:2},i="Using strings in COM",s={unversionedId:"com-programming/strings",id:"com-programming/strings",title:"Using strings in COM",description:"Most COM interfaces use regular C strings, which are allocated and used using",source:"@site/docs/com-programming/strings.md",sourceDirName:"com-programming",slug:"/com-programming/strings",permalink:"/docs/com-programming/strings",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/com-programming/strings.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"win32DocSidebar",previous:{title:"Using COM from Dart",permalink:"/docs/com-programming/basics"}},p={},l=[],c={toc:l},m="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"using-strings-in-com"},"Using strings in COM"),(0,a.kt)("p",null,"Most COM interfaces use regular C strings, which are allocated and used using\nthe techniques described in ",(0,a.kt)("a",{parentName:"p",href:"docs/win32-programming/memory#allocating-strings"},"Allocating\nstrings"),"."),(0,a.kt)("p",null,"However, some COM APIs use the ",(0,a.kt)("inlineCode",{parentName:"p"},"BSTR")," type, in particular those that support\nlate binding (often known as ",(0,a.kt)("inlineCode",{parentName:"p"},"IDispatch"),") interfaces."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"BSTR")," types differ from ",(0,a.kt)("inlineCode",{parentName:"p"},"Pointer<Utf16>")," in that they include a four byte\nprefix stored immediately prior to the string itself that represents its\nlength in bytes. The pointer points to the first character of the data\nstring, not to the length prefix."),(0,a.kt)("admonition",{type:"warning"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"BSTR"),"s should never be created using Dart's memory allocation functions.\nFor instance, the following code is incorrect, since it does not allocate\nand store the length prefix."),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"final bstr = 'I am a happy BSTR'.toNativeUtf16();\n"))),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"win32")," pacakge instead offers a wrapper for the COM memory allocation\nfunctions so that ",(0,a.kt)("inlineCode",{parentName:"p"},"BSTR")," types can be created without concern. Instead of the\nabove code, you can write:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"final bstr = BSTR.fromString('I am a happy BSTR');\n")),(0,a.kt)("p",null,"A debugger that examines the four bytes prior to this location will see a\n32-bit int containing the value 34, representing the length of the string in\nUtf-16."),(0,a.kt)("p",null,"You can access the pointer for a ",(0,a.kt)("inlineCode",{parentName:"p"},"BSTR")," using its ",(0,a.kt)("inlineCode",{parentName:"p"},".ptr")," property."),(0,a.kt)("p",null,"As with other manually allocated memory, Dart does not garbage collect ",(0,a.kt)("inlineCode",{parentName:"p"},"BSTR"),"\nobjects; instead, you are responsible for freeing the memory allocated for a\n",(0,a.kt)("inlineCode",{parentName:"p"},"BSTR")," when it is no longer used."),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"To release its memory, don't use the global\n",(0,a.kt)("inlineCode",{parentName:"p"},"free()")," function, since that will not free the length prefix. Instead, either\nuse the ",(0,a.kt)("inlineCode",{parentName:"p"},".free()")," method on the ",(0,a.kt)("inlineCode",{parentName:"p"},"BSTR")," object itself, or use the Windows API\n",(0,a.kt)("inlineCode",{parentName:"p"},"SysFreeString"),":"),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",{parentName:"pre",className:"language-dart"},"free(bstr);              // BAD!!! This will leak memory\n\nbstr.free();             // Good\nSysFreeString(bstr.ptr); // Also good\n"))))}u.isMDXComponent=!0}}]);