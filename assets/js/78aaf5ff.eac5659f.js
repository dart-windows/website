"use strict";(self.webpackChunkwin_32_site=self.webpackChunkwin_32_site||[]).push([[331],{8219:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>x,frontMatter:()=>d,metadata:()=>c,toc:()=>o});var s=t(5893),i=t(1151);const d={sidebar_position:3},r="Types in Win32",c={id:"win32-programming/types",title:"Types in Win32",description:"Integer types",source:"@site/docs/win32-programming/types.md",sourceDirName:"win32-programming",slug:"/win32-programming/types",permalink:"/docs/win32-programming/types",draft:!1,unlisted:!1,editUrl:"https://github.com/dart-windows/website/tree/main/docs/win32-programming/types.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"docs",previous:{title:"Win32 functions",permalink:"/docs/win32-programming/functions"},next:{title:"Manual memory allocation",permalink:"/docs/win32-programming/memory"}},l={},o=[{value:"Integer types",id:"integer-types",level:2}];function h(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"types-in-win32",children:"Types in Win32"}),"\n",(0,s.jsx)(n.h2,{id:"integer-types",children:"Integer types"}),"\n",(0,s.jsxs)(n.p,{children:["Compared to Dart, which has a single integer type that is used for storing any\nvalue between -2",(0,s.jsx)("sup",{children:"63"}),"-1 and 2",(0,s.jsx)("sup",{children:"63"}),", the Win32 API has\ndifferent-sized integer types in both unsigned and signed variants. The\nfollowing table demonstrates the various integer types you'll commonly encounter\nwhen accessing Win32 APIs:"]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Common Win32 names"}),(0,s.jsxs)(n.th,{children:[(0,s.jsx)(n.code,{children:"dart:ffi"})," type"]}),(0,s.jsx)(n.th,{children:"Size"}),(0,s.jsx)(n.th,{children:"Signed"}),(0,s.jsx)(n.th,{style:{textAlign:"right"},children:"Range"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"BYTE"}),", ",(0,s.jsx)(n.code,{children:"UINT8"}),", ",(0,s.jsx)(n.code,{children:"CHAR"})]}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Uint8"})}),(0,s.jsx)(n.td,{children:"8 bits"}),(0,s.jsx)(n.td,{children:"No"}),(0,s.jsx)(n.td,{style:{textAlign:"right"},children:"0 to 255"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"INT8"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Int8"})}),(0,s.jsx)(n.td,{children:"8 bits"}),(0,s.jsx)(n.td,{children:"Yes"}),(0,s.jsx)(n.td,{style:{textAlign:"right"},children:"-127 to 128"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"WORD"}),", ",(0,s.jsx)(n.code,{children:"ATOM"}),", ",(0,s.jsx)(n.code,{children:"UINT16"}),", ",(0,s.jsx)(n.code,{children:"USHORT"})]}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Uint16"})}),(0,s.jsx)(n.td,{children:"16 bits"}),(0,s.jsx)(n.td,{children:"No"}),(0,s.jsx)(n.td,{style:{textAlign:"right"},children:"0 to 65535"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"INT16"}),", ",(0,s.jsx)(n.code,{children:"SHORT"})]}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Int16"})}),(0,s.jsx)(n.td,{children:"16 bits"}),(0,s.jsx)(n.td,{children:"Yes"}),(0,s.jsx)(n.td,{style:{textAlign:"right"},children:"-32767 to 32768"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"DWORD"}),", ",(0,s.jsx)(n.code,{children:"UINT"}),", ",(0,s.jsx)(n.code,{children:"UINT32"}),", ",(0,s.jsx)(n.code,{children:"ULONG"})]}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Uint32"})}),(0,s.jsx)(n.td,{children:"32 bits"}),(0,s.jsx)(n.td,{children:"No"}),(0,s.jsxs)(n.td,{style:{textAlign:"right"},children:["0 to 2",(0,s.jsx)("sup",{children:"32"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"INT"}),", ",(0,s.jsx)(n.code,{children:"INT32"}),", ",(0,s.jsx)(n.code,{children:"LONG"})]}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Int32"})}),(0,s.jsx)(n.td,{children:"32 bits"}),(0,s.jsx)(n.td,{children:"Yes"}),(0,s.jsxs)(n.td,{style:{textAlign:"right"},children:["-2",(0,s.jsx)("sup",{children:"31"}),"-1 to 2",(0,s.jsx)("sup",{children:"31"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"DWORDLONG"}),", ",(0,s.jsx)(n.code,{children:"ULONGLONG"}),", ",(0,s.jsx)(n.code,{children:"UINT64"}),", ",(0,s.jsx)(n.code,{children:"ULONG64"})]}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Uint64"})}),(0,s.jsx)(n.td,{children:"64 bits"}),(0,s.jsx)(n.td,{children:"No"}),(0,s.jsxs)(n.td,{style:{textAlign:"right"},children:["0 to 2",(0,s.jsx)("sup",{children:"64"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"LONGLONG"}),", ",(0,s.jsx)(n.code,{children:"INT64"})]}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Int64"})}),(0,s.jsx)(n.td,{children:"64 bits"}),(0,s.jsx)(n.td,{children:"Yes"}),(0,s.jsxs)(n.td,{style:{textAlign:"right"},children:["-2",(0,s.jsx)("sup",{children:"63"}),"-1 to 2",(0,s.jsx)("sup",{children:"63"})]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"HANDLE"}),", ",(0,s.jsx)(n.code,{children:"LONG_PTR"}),", ",(0,s.jsx)(n.code,{children:"UINT_PTR"}),", ",(0,s.jsx)(n.code,{children:"ULONG_PTR"})]}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"IntPtr"})}),(0,s.jsx)(n.td,{children:"32/64 bits"}),(0,s.jsx)(n.td,{children:"No"}),(0,s.jsx)(n.td,{style:{textAlign:"right"},children:"matches pointer length"})]})]})]}),"\n",(0,s.jsxs)(n.p,{children:["When you're calling a function and passing a value in, you don't have to worry\nabout this: ",(0,s.jsx)(n.code,{children:"package:win32"})," includes all the metadata to convert from a Dart\n",(0,s.jsx)(n.code,{children:"int"})," type to the appropriate native representation."]}),"\n",(0,s.jsxs)(n.p,{children:["However, knowing the type of data becomes important when a function is\n",(0,s.jsx)(n.em,{children:"returning"})," a value, since Win32 typically uses a ",(0,s.jsx)(n.code,{children:"Pointer"})," argument that it\nfills with the relevant data."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"package:win32"})," includes typedefs for all the common Win32 integer types, so you\ndon't have to remember the size and sign of a type like ",(0,s.jsx)(n.code,{children:"DWORD"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"For example, here's how to get the size of the system memory using Dart:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dart",children:"final lpMemorySize = calloc<ULONGLONG>();\nGetPhysicallyInstalledSystemMemory(lpMemorySize);\nfinal memorySizeMB = lpMemorySize.value ~/ 1024;\nprint('System has ${memorySizeMB}MB of RAM installed.');\nfree(lpMemorySize);\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"lpMemorySize"})," could also be allocated as ",(0,s.jsx)(n.code,{children:"calloc<ULONG64>()"})," or\n",(0,s.jsx)(n.code,{children:"calloc<Uint64>()"}),": they all mean the same thing."]})]})}function x(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>c,a:()=>r});var s=t(7294);const i={},d=s.createContext(i);function r(e){const n=s.useContext(d);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(d.Provider,{value:n},e.children)}}}]);