"use strict";(self.webpackChunkwin_32_site=self.webpackChunkwin_32_site||[]).push([[887],{8151:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var t=i(5893),o=i(1151);const a={sidebar_position:1},r="Basic concepts",c={id:"com-programming/basics",title:"Basic concepts",description:"Since the win32 package primarily focuses on providing a lightweight wrapper",source:"@site/docs/com-programming/basics.md",sourceDirName:"com-programming",slug:"/com-programming/basics",permalink:"/docs/com-programming/basics",draft:!1,unlisted:!1,editUrl:"https://github.com/dart-windows/website/tree/main/docs/com-programming/basics.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docs",previous:{title:"COM Programming",permalink:"/docs/category/com-programming"},next:{title:"Using strings in COM",permalink:"/docs/com-programming/strings"}},s={},l=[{value:"Initializing the COM library",id:"initializing-the-com-library",level:2},{value:"Creating a COM object",id:"creating-a-com-object",level:2},{value:"Asking a COM object for an interface",id:"asking-a-com-object-for-an-interface",level:2},{value:"Calling a method on a COM object",id:"calling-a-method-on-a-com-object",level:2},{value:"Releasing COM objects",id:"releasing-com-objects",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"basic-concepts",children:"Basic concepts"}),"\n",(0,t.jsxs)(n.p,{children:["Since the ",(0,t.jsx)(n.code,{children:"win32"})," package primarily focuses on providing a lightweight wrapper\nfor the underlying Windows API primitives, you can use the same API calls as\ndescribed in Microsoft documentation to create and manipulate objects (e.g.\n",(0,t.jsx)(n.code,{children:"CoCreateInstance"})," and ",(0,t.jsx)(n.code,{children:"IUnknown->QueryInterface"}),"). However, since this\nintroduces a certain amount of boilerplate and non-idiomatic Dart code, the\nlibrary also provides some helper functions that reduce the labor compared to a\npure C-style calling convention."]}),"\n",(0,t.jsx)(n.h2,{id:"initializing-the-com-library",children:"Initializing the COM library"}),"\n",(0,t.jsxs)(n.p,{children:["Before you call any COM functions, first initialize the COM library by calling\nthe ",(0,t.jsx)(n.code,{children:"CoInitializeEx"})," function. Details of the threading models are outside the\nscope of this document, but typically you should write something like:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"final hr = CoInitializeEx(\n    nullptr, COINIT_APARTMENTTHREADED | COINIT_DISABLE_OLE1DDE);\nif (FAILED(hr)) throw WindowsException(hr);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"creating-a-com-object",children:"Creating a COM object"}),"\n",(0,t.jsxs)(n.p,{children:["You can create COM objects using the ",(0,t.jsx)(n.a,{href:"https://learn.microsoft.com/windows/win32/learnwin32/creating-an-object-in-com",children:"C library"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"hr = CoCreateInstance(clsid, nullptr, CLSCTX_INPROC_SERVER, iid, ppv);\n"})}),"\n",(0,t.jsxs)(n.p,{children:["However, rather than manually allocate GUID structs for the ",(0,t.jsx)(n.code,{children:"clsid"})," and ",(0,t.jsx)(n.code,{children:"iid"}),"\nvalues, checking the ",(0,t.jsx)(n.code,{children:"hr"})," result code and deal with casting the ",(0,t.jsx)(n.code,{children:"ppv"})," return\nobject, it is easier to use the ",(0,t.jsx)(n.code,{children:"createFromID"})," static helper function:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"final fileDialog2 = IFileDialog2(\n    COMObject.createFromID(CLSID_FileOpenDialog, IID_IFileDialog2));\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"createFromID"})," returns a ",(0,t.jsx)(n.code,{children:"Pointer<COMObject>"})," containing the requested object,\nwhich can then be cast into the appropriate interface as shown above."]}),"\n",(0,t.jsx)(n.h2,{id:"asking-a-com-object-for-an-interface",children:"Asking a COM object for an interface"}),"\n",(0,t.jsxs)(n.p,{children:["COM allows objects to implement multiple interfaces, but it does not let you\nmerely cast an object to a different interface. Instead, returned pointers are\nto a specific interface. However, every COM interface in the ",(0,t.jsx)(n.code,{children:"win32"})," package\nderives from ",(0,t.jsx)(n.code,{children:"IUnknown"}),", so as in other language implementations of COM, you\nmay call ",(0,t.jsx)(n.code,{children:"queryInterface"})," on any object to retrieve a pointer to a different\nsupported interface."]}),"\n",(0,t.jsxs)(n.p,{children:["More information on COM interfaces may be found in the\n",(0,t.jsx)(n.a,{href:"https://learn.microsoft.com/windows/win32/learnwin32/asking-an-object-for-an-interface",children:"Microsoft documentation"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["COM interfaces supply a method that wraps ",(0,t.jsx)(n.code,{children:"queryInterface"}),". If you\nhave an existing COM object, you can call it as follows:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"  final modalWindow = IModalWindow(fileDialog2.toInterface(IID_IModalWindow));\n"})}),"\n",(0,t.jsxs)(n.p,{children:["or, you can use the ",(0,t.jsx)(n.code,{children:"from"})," constructor that wraps the ",(0,t.jsx)(n.code,{children:"toInterface"})," for you:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"  final modalWindow = IModalWindow.from(fileDialog2);\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Where ",(0,t.jsx)(n.code,{children:"createFromID"})," creates a new COM object, ",(0,t.jsx)(n.code,{children:"toInterface"})," casts an existing\nCOM object to a new interface."]}),"\n",(0,t.jsxs)(n.p,{children:["Attempting to cast a COM object to an interface it does not support will fail,\nof course. A ",(0,t.jsx)(n.code,{children:"WindowsException"})," will be thrown with an hr of ",(0,t.jsx)(n.code,{children:"E_NOINTERFACE"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"calling-a-method-on-a-com-object",children:"Calling a method on a COM object"}),"\n",(0,t.jsxs)(n.p,{children:["No special considerations are needed here; however, it is wise to assign the\nreturn value to a variable and test it for success or failure. You can use the\n",(0,t.jsx)(n.code,{children:"SUCCEEDED()"})," or ",(0,t.jsx)(n.code,{children:"FAILED()"})," top-level functions to do this, for example:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"final hr = fileOpenDialog.show(NULL);\nif (SUCCEEDED(hr)) {\n  // Do something with the returned dialog box values\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Failures are reported as ",(0,t.jsx)(n.code,{children:"HRESULT"})," values (e.g. ",(0,t.jsx)(n.code,{children:"E_ACCESSDENIED"}),"). Sometimes a\nWin32 error code is converted to an ",(0,t.jsx)(n.code,{children:"HRESULT"}),", as in the case where a user\ncancels a common dialog box:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"final hr = fileOpenDialog.show(NULL);\nif (FAILED(hr) && hr == HRESULT_FROM_WIN32(ERROR_CANCELLED)) {\n  // User clicked cancel\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"releasing-com-objects",children:"Releasing COM objects"}),"\n",(0,t.jsxs)(n.p,{children:["In general, releasing COM objects isn't something you need to worry about,\nbecause when the object becomes inaccessible to the program, the ",(0,t.jsx)(n.a,{href:"https://api.dart.dev/stable/dart-core/Finalizer-class.html",children:"Finalizer"}),"\nautomatically releases it for you."]}),"\n",(0,t.jsxs)(n.admonition,{type:"caution",children:[(0,t.jsxs)(n.p,{children:["If you are manually managing the lifetime of an object, such as by calling the\n",(0,t.jsx)(n.code,{children:".detach()"})," method, then it is important to ensure that you release it properly\nby calling the ",(0,t.jsx)(n.code,{children:".release()"})," method. Additionally, you should free up the memory\nthat was allocated for the object by calling the ",(0,t.jsx)(n.code,{children:"free()"})," helper function as\nfollows:"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"fileOpenDialog.release(); // Release the COM object\nfree(fileOpenDialog.ptr); // Release the allocated memory for the object\n"})}),(0,t.jsx)(n.p,{children:"This is necessary to prevent memory leaks and ensure that the memory used by\nthe object is properly released."}),(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["It is important to include this code as part of a ",(0,t.jsx)(n.code,{children:"try"})," / ",(0,t.jsx)(n.code,{children:"finally"})," block to\nensure that the object is released properly, even if an exception is thrown\nduring the execution of your code."]})})]})]})}function h(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>c,a:()=>r});var t=i(7294);const o={},a=t.createContext(o);function r(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);