"use strict";(self.webpackChunkwin_32_site=self.webpackChunkwin_32_site||[]).push([[638],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=s(n),d=r,f=m["".concat(c,".").concat(d)]||m[d]||u[d]||i;return n?a.createElement(f,o(o({ref:t},p),{},{components:n})):a.createElement(f,o({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[m]="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2846:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_position:7},o="Function callbacks",l={unversionedId:"win32-programming/callbacks",id:"win32-programming/callbacks",title:"Function callbacks",description:"Some Win32 APIs are asynchronous: a function call doesn't complete and return",source:"@site/docs/win32-programming/callbacks.md",sourceDirName:"win32-programming",slug:"/win32-programming/callbacks",permalink:"/docs/win32-programming/callbacks",draft:!1,editUrl:"https://github.com/dart-windows/website/tree/main/docs/win32-programming/callbacks.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"docs",previous:{title:"Patterns for memory management",permalink:"/docs/win32-programming/memory-patterns"},next:{title:"COM Programming",permalink:"/docs/category/com-programming"}},c={},s=[],p={toc:s},m="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"function-callbacks"},"Function callbacks"),(0,r.kt)("p",null,"Some Win32 APIs are asynchronous: a function call doesn't complete and return\nall the information requested. Dart has the ",(0,r.kt)("inlineCode",{parentName:"p"},"async"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"await")," pattern for handling\nasynchronous calls within Dart libraries and packages, but the C-based Win32 API\nmodel does not have a similar construct. So calling Win32 APIs that are\nasynchronous is handled instead through ",(0,r.kt)("em",{parentName:"p"},"callbacks"),", in which you pass a\nfunction with the first API call that Win32 executes to pass data back."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Currently, Dart provides two ways for creating callback functions that can be\ninvoked from native functions:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://api.dart.dev/stable/3.2.2/dart-ffi/NativeCallable/NativeCallable.isolateLocal.html"},(0,r.kt)("inlineCode",{parentName:"a"},"NativeCallable.isolateLocal")),":\nConstructs a ",(0,r.kt)("inlineCode",{parentName:"p"},"NativeCallable")," that must be invoked from the same thread that\ncreated it.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://api.dart.dev/stable/3.2.2/dart-ffi/NativeCallable/NativeCallable.listener.html"},(0,r.kt)("inlineCode",{parentName:"a"},"NativeCallable.listener")),":\nConstructs a ",(0,r.kt)("inlineCode",{parentName:"p"},"NativeCallable")," that can be invoked from any thread. However, it\nhas a limitation; only ",(0,r.kt)("inlineCode",{parentName:"p"},"void")," functions are supported."),(0,r.kt)("p",{parentName:"li"},"Choosing between these two options depends on your specific requirements,\nparticularly the threading context in which the Win32 API you'll call\noperates.")))),(0,r.kt)("p",null,"As an example of creating a callback, let's look at the\n",(0,r.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/windows/win32/api/wingdi/nf-wingdi-enumfontfamiliesexw"},(0,r.kt)("inlineCode",{parentName:"a"},"EnumFontFamiliesEx")),"\nfunction, which enumerates all uniquely-named fonts in the system that match a\nspecified set of font characteristics. ",(0,r.kt)("inlineCode",{parentName:"p"},"EnumFontFamiliesEx")," takes a ",(0,r.kt)("inlineCode",{parentName:"p"},"LOGFONT"),"\nstruct which contains the"),(0,r.kt)("p",null,"The Dart function signature for ",(0,r.kt)("inlineCode",{parentName:"p"},"EnumFontFamiliesEx")," is as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"int EnumFontFamiliesEx(\n        int hdc,\n        Pointer<LOGFONT> lpLogfont,\n        Pointer<NativeFunction<EnumFontFamExProc>> lpProc,\n        int lParam,\n        int dwFlags) { ... }\n")),(0,r.kt)("p",null,"Notice the third parameter, which is a pointer to the callback function.\n",(0,r.kt)("inlineCode",{parentName:"p"},"EnumFontFamExProc"),". This is called once for every enumerated font, and is\ndefined as:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"typedef EnumFontFamExProc = Int32 Function(Pointer<LOGFONT> lpelfe,\n    Pointer<TEXTMETRIC> lpntme, DWORD FontType, LPARAM lParam);\n")),(0,r.kt)("p",null,"To create a callback function, define a Dart function that matches the types in\nthe native callback function above. Replace any integer types with a simple\n",(0,r.kt)("inlineCode",{parentName:"p"},"int")," Dart type. Here's an example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"int enumerateFonts(\n    Pointer<LOGFONT> logFont, Pointer<TEXTMETRIC> _, int __, int ___) {\n  // Get extended information from the font\n  final logFontEx = logFont.cast<ENUMLOGFONTEX>();\n\n  print(logFontEx.ref.elfFullName);\n  return TRUE; // continue enumeration\n}\n")),(0,r.kt)("p",null,"A couple of details that are worthy of note:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Since we are only using the first parameter, we use the Dart ",(0,r.kt)("inlineCode",{parentName:"li"},"_")," convention to\nnote that other parameter values are ignored."),(0,r.kt)("li",{parentName:"ul"},"This callback returns ",(0,r.kt)("inlineCode",{parentName:"li"},"TRUE")," to indicate that the enumeration should continue.\nWe could stop the callback from being fired for the next enumerated value by\nreturning ",(0,r.kt)("inlineCode",{parentName:"li"},"FALSE")," instead (for example, if we'd found a specific font that we\nwere looking for).")),(0,r.kt)("p",null,"Now we have our function callback, we can use it to call ",(0,r.kt)("inlineCode",{parentName:"p"},"EnumFontFamiliesEx"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-dart"},"void main() {\n  final hDC = GetDC(NULL);\n  final searchFont = calloc<LOGFONT>()..ref.lfCharSet = HANGUL_CHARSET;\n  final callback = NativeCallable<EnumFontFamExProc>.isolateLocal(\n    enumerateFonts,\n    exceptionalReturn: 0,\n  );\n\n  EnumFontFamiliesEx(hDC, searchFont, callback.nativeFunction, 0, 0);\n\n  // Close the callback when it's no longer needed\n  callback.close();\n\n  free(searchFont);\n}\n")),(0,r.kt)("p",null,"In the above function, we create a struct ",(0,r.kt)("inlineCode",{parentName:"p"},"LOGFONT")," containing our required\nsearch characteristics (fonts that support the Hangul, or Korean, character\nset). We then create a\n",(0,r.kt)("a",{parentName:"p",href:"https://api.dart.dev/stable/3.2.2/dart-ffi/NativeCallable-class.html"},"NativeCallable"),"\nfor the Dart callback function using the\n",(0,r.kt)("a",{parentName:"p",href:"https://api.dart.dev/stable/3.2.2/dart-ffi/NativeCallable/NativeCallable.isolateLocal.html"},(0,r.kt)("inlineCode",{parentName:"a"},"NativeCallable.isolateLocal")),"\nconstructor. Lastly, we call the ",(0,r.kt)("inlineCode",{parentName:"p"},"EnumFontFamiliesEx")," API to set up the\nenumeration. The Dart ",(0,r.kt)("inlineCode",{parentName:"p"},"enumerateFonts()")," function will now be called once for\nevery discovered font that matches the search characteristics."),(0,r.kt)("p",null,"A complete version of the example here can be found in the ",(0,r.kt)("inlineCode",{parentName:"p"},"example")," folder of\n",(0,r.kt)("inlineCode",{parentName:"p"},"package:win32")," as\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/dart-windows/win32/blob/main/example/fonts.dart"},(0,r.kt)("inlineCode",{parentName:"a"},"fonts.dart")),"."))}u.isMDXComponent=!0}}]);