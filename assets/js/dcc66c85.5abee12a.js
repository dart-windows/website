"use strict";(self.webpackChunkwin_32_site=self.webpackChunkwin_32_site||[]).push([[320],{3571:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var r=t(5893),s=t(1151);const i={sidebar_position:2},o="Using strings in COM",a={id:"com-programming/strings",title:"Using strings in COM",description:"Most COM interfaces use regular C strings, which are allocated and used using",source:"@site/docs/com-programming/strings.md",sourceDirName:"com-programming",slug:"/com-programming/strings",permalink:"/docs/com-programming/strings",draft:!1,unlisted:!1,editUrl:"https://github.com/dart-windows/website/tree/main/docs/com-programming/strings.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docs",previous:{title:"Basic concepts",permalink:"/docs/com-programming/basics"},next:{title:"WinRT Programming",permalink:"/docs/category/winrt-programming"}},c={},d=[];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"using-strings-in-com",children:"Using strings in COM"}),"\n",(0,r.jsxs)(n.p,{children:["Most COM interfaces use regular C strings, which are allocated and used using\nthe techniques described in ",(0,r.jsx)(n.a,{href:"docs/win32-programming/memory#allocating-strings",children:"Allocating\nstrings"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["However, some COM APIs use the ",(0,r.jsx)(n.code,{children:"BSTR"})," type, in particular those that support\nlate binding (often known as ",(0,r.jsx)(n.code,{children:"IDispatch"}),") interfaces."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"BSTR"})," types differ from ",(0,r.jsx)(n.code,{children:"Pointer<Utf16>"})," in that they include a four byte\nprefix stored immediately prior to the string itself that represents its\nlength in bytes. The pointer points to the first character of the data\nstring, not to the length prefix."]}),"\n",(0,r.jsxs)(n.admonition,{type:"warning",children:[(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"BSTR"}),"s should never be created using Dart's memory allocation functions.\nFor instance, the following code is incorrect, since it does not allocate\nand store the length prefix."]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"final bstr = 'I am a happy BSTR'.toNativeUtf16();\n"})})]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"win32"})," package instead offers a wrapper for the COM memory allocation\nfunctions so that ",(0,r.jsx)(n.code,{children:"BSTR"})," types can be created without concern. Instead of the\nabove code, you can write:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"final bstr = BSTR.fromString('I am a happy BSTR');\n"})}),"\n",(0,r.jsx)(n.p,{children:"A debugger that examines the four bytes prior to this location will see a 32-bit\nint containing the value 34, representing the length of the string encoded in\nUTF-16 (two bytes per char)."}),"\n",(0,r.jsx)(n.p,{children:"For example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"  final bstr = BSTR.fromString('I am a happy BSTR');\n  final len = bstr.ptr.cast<Uint32>()[-1];\n  print('Length of bstr: $len');\n  bstr.free();\n"})}),"\n",(0,r.jsxs)(n.p,{children:["As shown above, you can access the pointer for a ",(0,r.jsx)(n.code,{children:"BSTR"})," using its ",(0,r.jsx)(n.code,{children:".ptr"}),"\nproperty."]}),"\n",(0,r.jsxs)(n.p,{children:["As with other manually allocated memory, Dart does not garbage collect ",(0,r.jsx)(n.code,{children:"BSTR"}),"\nobjects; instead, you are responsible for freeing the memory allocated for a\n",(0,r.jsx)(n.code,{children:"BSTR"})," when it is no longer used."]}),"\n",(0,r.jsxs)(n.admonition,{type:"caution",children:[(0,r.jsxs)(n.p,{children:["To release its memory, don't use the global\n",(0,r.jsx)(n.code,{children:"free()"})," function, since that will not free the length prefix. Instead, either\nuse the ",(0,r.jsx)(n.code,{children:".free()"})," method on the ",(0,r.jsx)(n.code,{children:"BSTR"})," object itself, or use the Windows API\n",(0,r.jsx)(n.code,{children:"SysFreeString"}),":"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"free(bstr);              // BAD!!! This will leak memory\n\nbstr.free();             // Good\nSysFreeString(bstr.ptr); // Also good\n"})})]})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>o});var r=t(7294);const s={},i=r.createContext(s);function o(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);