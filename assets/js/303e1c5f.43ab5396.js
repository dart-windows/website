"use strict";(self.webpackChunkwin_32_site=self.webpackChunkwin_32_site||[]).push([[155],{1842:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=t(5893),i=t(1151);const a={sidebar_position:6},o="Patterns for memory management",s={id:"win32-programming/memory-patterns",title:"Patterns for memory management",description:"Consider the following (bad) example of a function that calls",source:"@site/docs/win32-programming/memory-patterns.md",sourceDirName:"win32-programming",slug:"/win32-programming/memory-patterns",permalink:"/docs/win32-programming/memory-patterns",draft:!1,unlisted:!1,editUrl:"https://github.com/dart-windows/website/tree/main/docs/win32-programming/memory-patterns.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"docs",previous:{title:"Using Win32 structs from Dart",permalink:"/docs/win32-programming/structs"},next:{title:"Function callbacks",permalink:"/docs/win32-programming/callbacks"}},l={},c=[{value:"The <code>try</code>/<code>finally</code> pattern",id:"the-tryfinally-pattern",level:2},{value:"The <code>using</code> pattern",id:"the-using-pattern",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"patterns-for-memory-management",children:"Patterns for memory management"}),"\n",(0,r.jsxs)(n.p,{children:["Consider the following (bad) example of a function that calls\n",(0,r.jsx)(n.a,{href:"https://learn.microsoft.com/windows/win32/api/combaseapi/nf-combaseapi-cocreateguid",children:(0,r.jsx)(n.code,{children:"CoCreateGuid"})}),"\nto return a String. Can you see a potential bug in this code?"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"// BAD: Don't do this, since the memory for pGuid may not be released\nString createGUID() {\n  final pGuid = calloc<GUID>();\n\n  final hr = CoCreateGuid(pGuid);\n  if (FAILED(hr)) throw WindowsException(hr);\n  final guid = pGuid.ref.toString();\n  free(pGuid);\n  return guid;\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Here's the problem: if ",(0,r.jsx)(n.code,{children:"CoCreateGuid()"})," fails, ",(0,r.jsx)(n.code,{children:"pGuid"})," will not be released\nprior to the exception being thrown. In this example, there are simple solutions\n(e.g. call ",(0,r.jsx)(n.code,{children:"free"})," in both failure and success scenarios). But when you're\nallocating lots of different objects, this approach can result in rather\nunreadable code with plenty of opportunity for memory leaks."]}),"\n",(0,r.jsxs)(n.h2,{id:"the-tryfinally-pattern",children:["The ",(0,r.jsx)(n.code,{children:"try"}),"/",(0,r.jsx)(n.code,{children:"finally"})," pattern"]}),"\n",(0,r.jsxs)(n.p,{children:["One good approach is the ",(0,r.jsx)(n.code,{children:"try"}),"/",(0,r.jsx)(n.code,{children:"finally"})," pattern in Dart, which guarantees the\n",(0,r.jsx)(n.code,{children:"finally"})," clause will be called:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"// GOOD: This approach is safe and convenient.\nString createGUID() {\n  final pGuid = calloc<GUID>();\n  try {\n    final hr = CoCreateGuid(pGuid);\n    if (FAILED(hr)) throw WindowsException(hr);\n    return pGuid.ref.toString();\n  } finally {\n    free(pGuid);\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In the above example, the ",(0,r.jsx)(n.code,{children:"free"})," will get called regardless of whether\n",(0,r.jsx)(n.code,{children:"CoCreateGuid()"})," fails or not. And there's no need to allocate the result to a\nseparate string before returning, since we know that ",(0,r.jsx)(n.code,{children:"finally"})," will be called at\nthe appropriate time."]}),"\n",(0,r.jsxs)(n.h2,{id:"the-using-pattern",children:["The ",(0,r.jsx)(n.code,{children:"using"})," pattern"]}),"\n",(0,r.jsxs)(n.p,{children:["For simpler methods, the ",(0,r.jsx)(n.code,{children:"try"}),"/",(0,r.jsx)(n.code,{children:"finally"})," pattern works well. But as you add more\nmanually-allocated objects, this becomes more unwieldy. For example, consider\nthis function, which interrogates Windows for the timestamp when the\ncurrently-running process was created:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"DateTime processCreationTime() {\n  final hProcess = GetCurrentProcess();\n  final pCreationTime = calloc<FILETIME>();\n  final pExitTime = calloc<FILETIME>();\n  final pKernelTime = calloc<FILETIME>();\n  final pUserTime = calloc<FILETIME>();\n  final pCreationSystemTime = calloc<SYSTEMTIME>();\n\n  try {\n    // Retrieve timing information for the current process\n    var hr = GetProcessTimes(\n        hProcess, pCreationTime, pExitTime, pKernelTime, pUserTime);\n    if (FAILED(hr)) throw WindowsException(hr);\n\n    // Convert to UTC\n    hr = FileTimeToSystemTime(pCreationTime, pCreationSystemTime);\n    if (FAILED(hr)) throw WindowsException(hr);\n    final SYSTEMTIME(:wYear, :wMonth, :wDay, :wHour, :wMinute, :wSecond) =\n        pCreationSystemTime.ref;\n    return DateTime.utc(wYear, wMonth, wDay, wHour, wMinute, wSecond).toLocal();\n  } finally {\n    free(pCreationTime);\n    free(pExitTime);\n    free(pKernelTime);\n    free(pUserTime);\n    free(pCreationSystemTime);\n  }\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["There are two problems with this code. Firstly, each variable has to be\nindividually freed. Secondly, the variable ",(0,r.jsx)(n.code,{children:"pCreationSystemTime"})," has to be\nallocated even if the first call fails. This can be a nuisance in larger\nmethods."]}),"\n",(0,r.jsxs)(n.p,{children:["An alternative approach is to use the\n",(0,r.jsx)(n.a,{href:"https://pub.dev/documentation/ffi/latest/ffi/using.html",children:(0,r.jsx)(n.code,{children:"using"})})," pattern with\nan ",(0,r.jsx)(n.a,{href:"https://pub.dev/documentation/ffi/latest/ffi/Arena-class.html",children:(0,r.jsx)(n.code,{children:"Arena"})}),"\nobject, which is a memory allocator that tracks memory allocations and\nautomatically releases them when the ",(0,r.jsx)(n.code,{children:"using"})," scope ends."]}),"\n",(0,r.jsx)(n.p,{children:"Here's the same function written this way:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"DateTime processCreationTime() {\n  return using((Arena alloc) {\n    final hProcess = GetCurrentProcess();\n    final pCreationTime = alloc<FILETIME>();\n    final pExitTime = alloc<FILETIME>();\n    final pKernelTime = alloc<FILETIME>();\n    final pUserTime = alloc<FILETIME>();\n\n    // Retrieve timing information for the current process\n    var hr = GetProcessTimes(\n        hProcess, pCreationTime, pExitTime, pKernelTime, pUserTime);\n    if (FAILED(hr)) throw WindowsException(hr);\n\n    // Convert to UTC\n    final pCreationSystemTime = alloc<SYSTEMTIME>();\n    hr = FileTimeToSystemTime(pCreationTime, pCreationSystemTime);\n    if (FAILED(hr)) throw WindowsException(hr);\n    final SYSTEMTIME(:wYear, :wMonth, :wDay, :wHour, :wMinute, :wSecond) =\n        pCreationSystemTime.ref;\n    return DateTime.utc(wYear, wMonth, wDay, wHour, wMinute, wSecond).toLocal();\n  });\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In the above code, the need for individual ",(0,r.jsx)(n.code,{children:"free"})," calls is dispensed with. When\nthe ",(0,r.jsx)(n.code,{children:"using"})," scope ends, the arena releases all the variables that have been\nallocated. Arenas can also be nested or shared across functions, which can be\nuseful when you need greater control over the lifetime of manually-allocated\nmemory."]}),"\n",(0,r.jsxs)(n.admonition,{type:"tip",children:[(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:".toNativeUtf16()"})," String extension method supports passing a custom\nallocator, so it can also be used with arenas. For example:"]}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"final pTitle = 'Window title'.toNativeUtf16(allocator: alloc);\n"})})]})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>s,a:()=>o});var r=t(7294);const i={},a=r.createContext(i);function o(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);